generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @map("_id")
  username String    @unique
  email    String    @unique
  password String
  avatar   Json?
  notes    String    @default("")
  projects Project[]

  auth_session             Session[]
  key                      Key[]
  OwnedProjects            Project[] @relation(name: "owner")
  ProjectManagerProjects   Project[] @relation(name: "projectManagers", fields: [ProjectManagerProjectsId], references: [id])
  ProjectManagerProjectsId String[]
  MemberProjects           Project[] @relation(name: "members", fields: [MemberProjectsId], references: [id])
  MemberProjectsId         String[]
  Task                     Task[]
  Task                     Task[]
}

model Project {
  id                 String   @id @default(uuid()) @map("_id")
  name               String
  projectCharter     String   @default("")
  completedPercent   Int      @default(0)
  owner              User     @relation(name: "owner", references: [id], fields: [owner_id], onDelete: Cascade)
  projectManagers    User[]   @relation(name: "projectManagers", references: [id], fields: [projectManagers_id])
  members            User[]   @relation(name: "members", references: [id], fields: [members_id])
  owner_id           String
  projectManagers_id String[]
  members_id         String[]
  User               User?    @relation(fields: [userId], references: [id])
  userId             String?
}

model Task {
  id                  String    @id @default(uuid()) @map("_id")
  name                String
  description         String?
  projectId           String
  assignedTo          User      @relation(name: "assignedToMember", references: [id], fields: [projectId])
  taskDependencies    Task      @relation(name: "taskDependency", fields: [taskDependencies_id], references: [id])
  taskDependencies_id String[]
  dueDate             DateTime
  subtasks            Subtask[]
  Task                Task[]
  User                User?     @relation(fields: [userId], references: [id])
  userId              String?
  Task                Task[]
  Task                Task?     @relation(fields: [taskId], references: [id])
  taskId              String?
}

model Subtask {
  id          String  @id @default(uuid()) @map("_id")
  name        String
  isCompleted Boolean
  task        Task    @relation(references: [id], fields: [taskId])
  taskId      String
}

model Session {
  id             String @id @map("_id")
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @map("_id")
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
